var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var events_1 = require('events');
var CreateTable_1 = require('./commands/CreateTable');
var Delete_1 = require('./commands/Delete');
var Insert_1 = require('./commands/Insert');
var Select_1 = require('./commands/Select');
var Update_1 = require('./commands/Update');
/**
Connection provides a single interface to functionality of sqlcmd, and stores
configuration defaults to be used with every query. The options are unused in
sqlcmd; only sqlcmd-pg, sqlcmd-sqlite3, etc., use the options argument.

Events:
  .on('log', (log_level, message, ...args) => { ... })

*/
var Connection = (function (_super) {
    __extends(Connection, _super);
    function Connection(options) {
        _super.call(this);
        this.options = options;
    }
    Connection.prototype.CreateTable = function (table) {
        var command = new CreateTable_1.default(table);
        command.connection = this;
        return command;
    };
    Connection.prototype.Delete = function (table) {
        var command = new Delete_1.default(table);
        command.connection = this;
        return command;
    };
    Connection.prototype.Insert = function (table) {
        var command = new Insert_1.default(table);
        command.connection = this;
        return command;
    };
    Connection.prototype.InsertOne = function (table) {
        var command = new Insert_1.InsertOne(table);
        command.connection = this;
        return command;
    };
    Connection.prototype.Select = function (table) {
        var command = new Select_1.default(table);
        command.connection = this;
        return command;
    };
    Connection.prototype.SelectOne = function (table) {
        var command = new Select_1.SelectOne(table);
        command.connection = this;
        return command;
    };
    Connection.prototype.Update = function (table) {
        var command = new Update_1.default(table);
        command.connection = this;
        return command;
    };
    Connection.prototype.UpdateOne = function (table) {
        var command = new Update_1.UpdateOne(table);
        command.connection = this;
        return command;
    };
    return Connection;
})(events_1.EventEmitter);
exports.Connection = Connection;
